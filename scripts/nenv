

# This file must be used with "source bin/activate" *from bash*
# you cannot run it directly.

# This files is based off of the same idea as the "activate" scripts for Python virtualenvironments,
# but works for NPM. It's not trying to emulate the "Virtual Environment" concept; npm already
# arguably has that with the node_modules folder. All this script is trying to do is emulate the
# "activate" script in virtualenvironments, and specifically just the "adding the binaries in the
# local node_modules folder to our $PATH". This is because node_modules contains a .bin/ directory
# where npm installs programs when run with 'npm install --save-dev foo', but there's no way to add
# that to our PATH. I want to be able to add that to my path, so I can have my tsserver in my PATH,
# and my tsfmt in my PATH. Hence this script.

# Sets or modifies the following vars:
#
#     NENV
#     NENV_PROMPT
#     _OLD_VIRTUAL_PATH # unexported
#     _OLD_VIRTUAL_PS1  # unexported
#     PATH              # modified


deactivate_nenv () {
	# reset old environment variables
	if [ -n "${_OLD_VIRTUAL_PATH:-}" ] ; then
		PATH="${_OLD_VIRTUAL_PATH:-}"
		export PATH
		unset _OLD_VIRTUAL_PATH
	fi

    # This should detect bash and zsh, which have a hash command that must
    # be called to get it to forget past commands.  Without forgetting
    # past commands the $PATH changes we made may not be respected
    if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ] ; then
        hash -r 2> /dev/null
    fi

    if [ -n "${_OLD_VIRTUAL_PS1:-}" ] ; then
        PS1="${_OLD_VIRTUAL_PS1:-}"
        export PS1
        unset _OLD_VIRTUAL_PS1
    fi

    unset NENV
    unset NENV_PROMPT
    if [ ! "${1:-}" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate_nenv
    fi
}

# unset for safety
deactivate_nenv nondestructive

# Use the node_modules folder in our current folder, or passed in as $1
if [ -n "$1" ] ; then
	NENV="$1"
else
	NENV="$PWD/node_modules"
fi

if [ ! -d "$NENV" ] ; then
	echo "# WARNING! nenv folder does not exist: ${NENV}"
fi

export NENV

# Note that since _OLD_VIRTUAL_PATH is NOT exported, it'll only be set in the shell which sources
# this files, and child processes of that shell will NOT be given a copy of _OLD_VIRTUAL_PATH. The
# same thing's true for the _OLD_VIRTUAL_PS1 var as well.
_OLD_VIRTUAL_PATH="$PATH"
PATH="$NENV/.bin:$PATH"
export PATH


_OLD_VIRTUAL_PS1="${PS1:-}"
NENV_PROMPT="(NENV ${NENV})\n"
export NENV_PROMPT
PS1="${NENV_PROMPT}${PS1:-}"
export PS1

# This should detect bash and zsh, which have a hash command that must
# be called to get it to forget past commands.  Without forgetting
# past commands the $PATH changes we made may not be respected
if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ] ; then
    hash -r 2> /dev/null
fi
